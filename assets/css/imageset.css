@charset "UTF-8";
/*!
 * ImageSet for Kirby CMS — A Responsive Image Component
 *
 * Copyright (c) 2016 Fabian Michael
 * 
 * URL: https://github.com/fabianmichael/kirby-imageset
 */
.imageset {
  /* A default imageset does not have too many parameters 
     set. It’s behavior is mostly determed by the modifiers
     on its container element. */
  /* Fixes a glitch in Firefox, where (in rare cases) a
     black border appears for no abvious reason at the
     left side of an imageset. */
  overflow: hidden;
  /* Improve rendering speed in supported browsers. */
  contain: content;
}

.imageset--ratio {
  display: inline-block;
  width: 100%;
  position: relative;
  /* Create a new stacking context for this imageset.
       See comments below to learn about why this
       is important. */
  z-index: 0;
  /* Image with a ratio placeholder */
}

.imageset--ratio .imageset__element {
  display: block;
  position: absolute;
  left: 0;
  top: 0;
  /* Override issues introduced by common rules
         for responsive images,
         e.g. `img { max-width: 100%; height: auto; }` */
  width: 100% !important;
  height: 100% !important;
  max-width: none !important;
  max-height: none !important;
  zoom: 1;
}

.imageset__ratio-fill {
  display: block;
  /* Setting the width of the placeholder element and
       adding `overflow: hidden` prevents rendering bugs
       in IE 11. */
  width: 100%;
  overflow: hidden;
  z-index: -1;
}

.js .imageset--ratio.imageset--lazyload .imageset__element {
  /* The actual image is kept behind the placeholder.
       Rather than fading in the image, the placeholder is
       faded out instead. This prevents the image layer to
       switch from hardware-accelerated rendering during the
       animation to CPU rendering after the animation has
       ended, because this can cause rendering issues in
       WebKit- and Blink-based (and possibly any other)
       browsers. */
  z-index: 1;
}

.imageset__placeholder {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  max-width: none !important;
  overflow: hidden;
  object-fit: cover;
  contain: strict;
}

.js .imageset--lazyload .imageset__placeholder {
  /* Placeholder will be placed on top of the actual
       image element. This will only be applied, when
       JavaScript is enabled. */
  /* A nice addition here would be:
     * `will-change: opacity;`, but it causes
     * subpixel-rendering issues in Safari 10 :-(
     */
  transition: opacity 0.5s 0.05s, visibility 0s 0.8s;
  z-index: 2;
  /* Prevent user interaction like accidently saving the
       placeholder via tap/right-click */
  pointer-events: none;
  /* Background color is needed to avoid `image-rendering`
       property beeing ignored when layer is rendered on
       the GPU during animation
       Tested in: Chrome 49, Safari 9.1 */
  background-color: #bbbbbb;
}

.imageset--placeholder--mosaic .imageset__placeholder {
  /* Mosaic placeholders should render crisp */
  image-rendering: optimizeSpeed;
  /* Legal fallback */
  image-rendering: -moz-crisp-edges;
  /* Firefox        */
  image-rendering: -o-crisp-edges;
  /* Opera          */
  image-rendering: -webkit-optimize-contrast;
  /* Safari         */
  image-rendering: optimize-contrast;
  /* CSS3 Proposed  */
  image-rendering: crisp-edges;
  /* CSS4 Proposed  */
  image-rendering: pixelated;
  /* CSS4 Proposed  */
  -ms-interpolation-mode: nearest-neighbor;
  /* IE8+           */
}

.js .imageset--loaded .imageset__placeholder {
  /* After image is loaded, the placeholder will fade out
       and then change visibility to allow mouse interation
       with the loaded image in browsers, where the
       `pointer-events` property is not supported. */
  opacity: 0;
  visibility: hidden;
}
