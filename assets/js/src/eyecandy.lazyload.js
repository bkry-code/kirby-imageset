/*!
 * Eye Candy lazyload (0.5.1)
 * This script file is needed for lazyloading image sets with Eye Candy.
 *
 * Copyright (c) 2016 Fabian Michael <hallo@fabianmichael.de>
 * @license Eye Candy License (see `readme.me` or `license.md`)
 */
;(function(window, document, undefined) {
  'use strict';

  var SETTINGS = {
    'wrapperClass'           : 'imageset',
    'wrapperLoadedClass'     : 'imageset--loaded',
    'imageElementClass'      : 'imageset__element',
    'placeholderClass'       : 'imageset__placeholder',
    'placeholderLoadedClass' : 'imageset__placeholder--loaded',
  };

  // Shim layer with setTimeout fallback. Look only for unprefixed
  // requestAnimationFrame, because all modern browsern already removed the
  // prefix.
  var rAF = window.requestAnimationFrame || function (callback) { setTimeout(callback, 1000/60); };

  // Store long property/method names in Variables, so the can be minified
  var _classListProperty = 'classList',
      _classNameProperty = 'className',
      _lazySizesConfig   = 'lazySizesConfig',
      _documentElement   = 'documentElement',
      _eyeCandyConfig    = 'eyeCandyConfig',
      _addEventListener  = 'addEventListener';

  // Class utilities using `classList` API if available.
  // Fallbacks inspired by: https://gist.github.com/devongovett/1381839
  var hasClass = (function () {
    return document[_documentElement][_classListProperty] ?
      function (el, cls) { return el[_classListProperty].contains(cls); } :
      function (el, cls) { return !!~el[_classNameProperty].split(/\s+/).indexOf(cls); };
  })();

  var addClass = (function () {
    return document[_documentElement][_classListProperty] ?
      function (el, cls) { el[_classListProperty].add(cls); } :
      function (el, cls) {
        var classes = el[_classNameProperty].split(/\s+/);
        if (!~classes.indexOf(cls)) {
          classes.push(cls);
          el[_classNameProperty] = classes.join(" ");
        }
      };
  })();

  // Extend an object with another one
  var extend = function(base, obj) {
    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        base[i] = obj[i];
      }
    }
    return base;
  };

  // Setup defaults
  if (window[_eyeCandyConfig]) {
    extend(SETTINGS, window[_eyeCandyConfig]);
  }
  window[_eyeCandyConfig] = SETTINGS;

  // Initialize
  document[_addEventListener]('lazybeforeunveil', function (e) {
    var element = e.target,
        parent  = element.parentNode;

    if (hasClass(element, SETTINGS.imageElementClass)) {
      // Only continue, if target element is an imageset, generated by Eye Candy

      while (!hasClass(parent, SETTINGS.wrapperClass)) {
        // Get imageset container element by traversing up the DOM tree
        parent = parent.parentNode;
      }

      // Define a callback function which gets invoked, after an image has
      // finally loaded.
      var cb = function () {
        rAF(function () {
          // Asynchronously add loaded class
          addClass(parent, SETTINGS.wrapperLoadedClass);
          element.removeEventListener("load", cb);
        });
      };

      element[_addEventListener]("load", cb);
    }
  });

  window[_lazySizesConfig] = extend({
    lazyClass:    'lazy',
    loadingClass: 'lazy--loading',
    loadedClass:  'lazy--loaded',
    //loadMode:     2,
  }, window[_lazySizesConfig] || {});

})(window, document);
